generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================================
// ENUMERACIONES DEL SISTEMA CORE
// =========================================================================

enum UserRole {
  SUPERADMIN           // Administrador del sistema
  CONCURSO_ADMIN       // Administrador de compañía
  REGISTRADOR          // Registrador de participantes
}

enum SubscriptionStatus {
  ACTIVO
  EXPIRADO
  SUSPENDIDO
  CANCELADO
}

enum SubscriptionPlan {
  BASICO
  PROFESIONAL
  EMPRESARIAL
}

enum CompanyRequestStatus {
  PENDIENTE            // Solicitud enviada, esperando aprobación
  APROBADA             // Solicitud aprobada, compañía creada
  RECHAZADA            // Solicitud rechazada
  EN_REVISION          // En proceso de revisión
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nombre    String
  apellido  String
  telefono  String?
  role      UserRole @default(REGISTRADOR)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  isActive  Boolean  @default(true)
  
  // Campos adicionales para SUPERADMIN
  isSuperAdmin Boolean @default(false)   // Flag adicional de seguridad
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones esenciales
  passwordResetTokens     PasswordResetToken[]
  companyRequestsReviewed CompanyRequest[]

  @@map("users")
}

// =========================================================================
// MODELO PARA TOKENS DE RESET DE CONTRASEÑA
// =========================================================================

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

// =========================================================================
// MODELO DE COMPAÑÍA
// =========================================================================

model Company {
  id          String             @id @default(cuid())
  nombre      String
  slug        String             @unique
  email       String
  telefono    String?
  direccion   String?
  logo        String?
  descripcion String?
  website     String?
  ubicacion   String?
  isFeatured  Boolean            @default(false)
  isPublished Boolean            @default(false)
  isActive    Boolean            @default(true)
  
  // Información adicional
  tipoOrganizacion String?        // Tipo de organización
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Suscripción
  subscription   Subscription?
  subscriptionId String?       @unique

  // Relaciones
  users     User[]
  
  // Solicitud original (si fue creada por solicitud)
  companyRequest CompanyRequest?

  @@map("companies")
}

// =========================================================================
// MODELO DE SUSCRIPCIÓN
// =========================================================================

model Subscription {
  id                String             @id @default(cuid())
  companyId         String             @unique
  company           Company            @relation(fields: [companyId], references: [id])
  plan              SubscriptionPlan   @default(BASICO)
  status            SubscriptionStatus @default(ACTIVO)
  maxUsers          Int                @default(5)    // Límite de usuarios
  usersUsed         Int                @default(0)    // Usuarios utilizados
  maxStorage        Int                @default(1000) // Límite de almacenamiento en MB
  storageUsed       Int                @default(0)    // Almacenamiento utilizado
  fechaInicio       DateTime           @default(now())
  fechaExpiracion   DateTime
  fechaRenovacion   DateTime?
  precio            Decimal            @db.Decimal(10, 2)
  notas             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("subscriptions")
}

// =========================================================================
// MODELO DE SOLICITUDES DE COMPAÑÍA
// =========================================================================

model CompanyRequest {
  id                String               @id @default(cuid())
  // Información del solicitante
  nombre            String
  apellido          String
  email             String               @unique
  telefono          String?
  
  // Información de la compañía solicitada
  nombreCompania    String
  descripcionCompania String?
  tipoOrganizacion  String?              // "Asociación Ganadera", "Cooperativa", etc.
  ubicacion         String?
  website           String?
  
  // Documentación de soporte
  documentos        String[]             // URLs de documentos subidos
  motivacion        String?              // Por qué quiere crear la compañía
  experiencia       String?              // Experiencia previa organizando eventos
  
  // Estado de la solicitud
  status            CompanyRequestStatus @default(PENDIENTE)
  notas             String?              // Notas del revisor
  
  // Relaciones
  reviewedById      String?              // SUPERADMIN que revisó
  reviewedBy        User?                @relation(fields: [reviewedById], references: [id])
  reviewedAt        DateTime?
  
  // Compañía creada (si fue aprobada)
  companyId         String?              @unique
  company           Company?             @relation(fields: [companyId], references: [id])
  
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([status])
  @@index([email])
  @@map("company_requests")
}
