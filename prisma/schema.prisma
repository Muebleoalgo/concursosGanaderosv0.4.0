generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================================================================
// ENUMERACIONES DEL SISTEMA CORE
// =========================================================================

enum UserRole {
  SUPERADMIN           // Administrador del sistema
  CONCURSO_ADMIN       // Administrador de compañía
  REGISTRADOR          // Registrador de participantes
}

enum SubscriptionStatus {
  ACTIVO
  EXPIRADO
  SUSPENDIDO
  CANCELADO
}

enum SubscriptionPlan {
  BASICO
  PROFESIONAL
  EMPRESARIAL
}

enum CompanyRequestStatus {
  PENDIENTE            // Solicitud enviada, esperando aprobación
  APROBADA             // Solicitud aprobada, compañía creada
  RECHAZADA            // Solicitud rechazada
  EN_REVISION          // En proceso de revisión
}

enum NotificationType {
  USER_CREATED         // Usuario creado
  USER_UPDATED         // Usuario actualizado
  USER_DELETED         // Usuario eliminado
  COMPANY_CREATED      // Compañía creada
  COMPANY_UPDATED      // Compañía actualizada
  SUBSCRIPTION_CREATED // Suscripción creada
  SUBSCRIPTION_UPDATED // Suscripción actualizada
  SUBSCRIPTION_EXPIRED // Suscripción expirada
  SYSTEM_ALERT         // Alerta del sistema
  PAYMENT_RECEIVED     // Pago recibido
  PAYMENT_FAILED       // Pago fallido
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

// =========================================================================
// ENUMERACIONES PARA GANADO
// =========================================================================

enum SexoGanado {
  MACHO
  HEMBRA
}

enum CategoriaGanado {
  A_DIENTES_LECHE                    // A - Dientes de Leche
  ADULTO_SENIOR                      // Adulto o Senior (desde 2 años adelante)
  B_DOS_DIENTES_SIN_PARIR           // B - Dos Dientes (Sin haber parido)
  C_DOS_DIENTES_LACTACION           // C - Dos Dientes Lactación
  D_CUATRO_DIENTES_LACTACION        // D - Cuatro Dientes Lactación
  E_SEIS_DIENTES_LACTACION          // E - Seis Dientes Lactación
  F_BOCA_LLENA_LACTACION            // F - Boca Llena en Lactación
  G_SECA_UNICA                      // G - Seca (haber parido) Única
  JOVEN_JUNIOR                      // Joven o Junior (1 año mayor)
  TERNERA_1_ANO_INTERMEDIA          // Ternera 1 año intermedia
  TERNERA_1_ANO_MAYOR               // Ternera 1 año mayor
  TERNERA_1_ANO_MENOR               // Ternera 1 año menor
  TERNERA_MAYOR                     // Ternera Mayor
  TERNERA_MENOR                     // Ternera Menor
  TERNERA_MENOR_INTERMEDIA          // Ternera Menor Intermedia
  VACA_2_ANOS_MAYOR_LACTACION       // Vaca 2 años mayor lactación
  VACA_2_ANOS_MENOR_LACTACION       // Vaca 2 años menor lactación
  VACA_3_ANOS_MAYOR_LACTACION       // Vaca 3 años mayor lactación
  VACA_3_ANOS_MENOR_LACTACION       // Vaca 3 años menor lactación
  VACA_4_ANOS_LACTACION             // Vaca 4 años lactación
  VACA_5_ANOS_LACTACION             // Vaca 5 años en lactación
  VACA_ADULTA_LACTACION             // Vaca Adulta en lactación
  VACAS_SECA_UNICA                  // Vacas en seca (Categoría Única)
}

enum RazaGanado {
  BROWN_SWISS_PDP                   // Brown Swiss PDP
  BROWN_SWISS_PPC                   // Brown Swiss PPC
  FLECKVIEH_PDP                     // Fleckvieh PDP
  FLECKVIEH_PPC                     // Fleckvieh PPC
  HOLSTEIN_PDP                      // Holstein PDP
  HOLSTEIN_PPC                      // Holstein PPC
  JERSEY_PDP                        // Jersey PDP
  JERSEY_PPC                        // Jersey PPC
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nombre    String
  apellido  String
  telefono  String?
  role      UserRole @default(REGISTRADOR)
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  isActive  Boolean  @default(true)
  
  // Campos adicionales para SUPERADMIN
  isSuperAdmin Boolean @default(false)   // Flag adicional de seguridad
  
  contestAccess   Boolean  @default(false)  // Acceso a funcionalidades de concursos
  lastLogin       DateTime?                  // Último inicio de sesión

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones esenciales
  passwordResetTokens     PasswordResetToken[]
  companyRequestsReviewed CompanyRequest[]
  notifications           Notification[]
  auditLogs               AuditLog[]
  ganadoCreated           Ganado[]

  @@map("users")
}

// =========================================================================
// MODELO PARA TOKENS DE RESET DE CONTRASEÑA
// =========================================================================

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

// =========================================================================
// MODELO DE COMPAÑÍA
// =========================================================================

model Company {
  id          String             @id @default(cuid())
  nombre      String
  slug        String             @unique
  email       String
  telefono    String?
  direccion   String?
  logo        String?
  descripcion String?
  website     String?
  ubicacion   String?
  isFeatured  Boolean            @default(false)
  isPublished Boolean            @default(false)
  isActive    Boolean            @default(true)
  
  // Información adicional
  tipoOrganizacion String?        // Tipo de organización
  
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Suscripción
  subscription   Subscription?
  subscriptionId String?       @unique

  // Relaciones
  users     User[]
  ganado    Ganado[]
  criadores Criador[]
  establos  Establo[]
  
  // Solicitud original (si fue creada por solicitud)
  companyRequest CompanyRequest?

  @@map("companies")
}

// =========================================================================
// MODELO DE SUSCRIPCIÓN
// =========================================================================

model Subscription {
  id                String             @id @default(cuid())
  companyId         String             @unique
  company           Company            @relation(fields: [companyId], references: [id])
  plan              SubscriptionPlan   @default(BASICO)
  status            SubscriptionStatus @default(ACTIVO)
  maxUsers          Int                @default(5)    // Límite de usuarios
  usersUsed         Int                @default(0)    // Usuarios utilizados
  maxStorage        Int                @default(1000) // Límite de almacenamiento en MB
  storageUsed       Int                @default(0)    // Almacenamiento utilizado
  fechaInicio       DateTime           @default(now())
  fechaExpiracion   DateTime
  fechaRenovacion   DateTime?
  precio            Decimal            @db.Decimal(10, 2)
  notas             String?

  maxConcursos         Int                @default(10)   // Límite de concursos
  concursosUsados      Int                @default(0)    // Concursos utilizados
  contestAccessEnabled Boolean            @default(true) // Acceso global a concursos habilitado

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@map("subscriptions")
}

// =========================================================================
// MODELO DE SOLICITUDES DE COMPAÑÍA
// =========================================================================

model CompanyRequest {
  id                String               @id @default(cuid())
  // Información del solicitante
  nombre            String
  apellido          String
  email             String               @unique
  telefono          String?
  
  // Información de la compañía solicitada
  nombreCompania    String
  descripcionCompania String?
  tipoOrganizacion  String?              // "Asociación Ganadera", "Cooperativa", etc.
  ubicacion         String?
  website           String?
  
  // Documentación de soporte
  documentos        String[]             // URLs de documentos subidos
  motivacion        String?              // Por qué quiere crear la compañía
  experiencia       String?              // Experiencia previa organizando eventos
  
  // Estado de la solicitud
  status            CompanyRequestStatus @default(PENDIENTE)
  notas             String?              // Notas del revisor
  
  // Relaciones
  reviewedById      String?              // SUPERADMIN que revisó
  reviewedBy        User?                @relation(fields: [reviewedById], references: [id])
  reviewedAt        DateTime?
  
  // Compañía creada (si fue aprobada)
  companyId         String?              @unique
  company           Company?             @relation(fields: [companyId], references: [id])
  
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([status])
  @@index([email])
  @@map("company_requests")
}

// =========================================================================
// MODELO DE NOTIFICACIONES
// =========================================================================

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  status      NotificationStatus @default(UNREAD)
  
  // Datos adicionales en JSON
  metadata    Json?              // Información adicional específica del tipo
  
  // Usuario destinatario (null = notificación global)
  userId      String?
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información de contexto
  entityType  String?            // "user", "company", "subscription", etc.
  entityId    String?            // ID de la entidad relacionada
  
  createdAt   DateTime           @default(now())
  readAt      DateTime?
  
  @@index([userId, status])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

// =========================================================================
// MODELO DE AUDITORÍA
// =========================================================================

model AuditLog {
  id          String   @id @default(cuid())
  action      String   // "CREATE", "UPDATE", "DELETE", etc.
  entityType  String   // "User", "Company", "Subscription", etc.
  entityId    String   // ID de la entidad afectada
  
  // Datos del cambio
  oldValues   Json?    // Valores anteriores
  newValues   Json?    // Valores nuevos
  
  // Usuario que realizó la acción
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // Información adicional
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// =========================================================================
// MODELO DE GANADO MEJORADO
// =========================================================================

model Ganado {
  id                String          @id @default(cuid())
  nombre            String
  fecha_nacimiento  String?         // Fecha como string para flexibilidad
  dias_nacida       Int?            // Días desde nacimiento
  categoria         CategoriaGanado
  establo           String?
  en_remate         Boolean         @default(false)
  propietario       String?         // Nombre del propietario
  descripcion       String?
  raza              RazaGanado
  peso              Decimal?        @db.Decimal(8, 2)
  sexo              SexoGanado?
  imagen_url        String?
  puntaje           Float?
  
  // Relaciones
  companyId         String
  company           Company         @relation(fields: [companyId], references: [id])
  criadorId         String?
  criador           Criador?        @relation(fields: [criadorId], references: [id])
  establoId         String?
  establoRel        Establo?        @relation(fields: [establoId], references: [id])
  
  // Metadatos
  createdById       String
  createdBy         User            @relation(fields: [createdById], references: [id])
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  
  @@index([companyId])
  @@index([criadorId])
  @@index([categoria])
  @@index([raza])
  @@map("ganado")
}

// =========================================================================
// MODELO DE CRIADOR
// =========================================================================

model Criador {
  id            String   @id @default(cuid())
  nombre        String
  apellido      String?
  nombreCompleto String  // Campo calculado para búsquedas
  telefono      String?
  email         String?
  direccion     String?
  documento     String?  // Cédula o documento de identidad
  notas         String?
  
  // Relaciones
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id])
  ganado        Ganado[]
  
  // Metadatos
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([companyId, nombreCompleto])
  @@index([companyId])
  @@index([nombreCompleto])
  @@map("criadores")
}

// =========================================================================
// MODELO DE ESTABLO
// =========================================================================

model Establo {
  id          String   @id @default(cuid())
  nombre      String
  ubicacion   String?
  descripcion String?
  capacidad   Int?
  
  // Relaciones
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  ganado      Ganado[]
  
  // Metadatos
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, nombre])
  @@index([companyId])
  @@map("establos")
}